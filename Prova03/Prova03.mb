## Equipe

- Andr√© Vinicius Agio
- Octavio Augusto Konzen  

---

## Tutorial T√©cnico - Componentes de Layout

Este documento descreve os principais componentes de layout utilizados no prot√≥tipo:

    Perfil do Pet

##1.Scaffold

Descri√ß√£o:
Estrutura base da interface, fornece um layout visual padr√£o com barra superior, corpo e outros elementos opcionais.

Aplica√ß√µes:
Presente como cont√™iner principal da interface.

Como usar:

```Scaffold(
  appBar: AppBar(title: Text('Perfil do Pet')),
  body: SingleChildScrollView(
    child: Column(children: [...]),
  ),
)```

---

##2.AppBar

Descri√ß√£o:
Barra superior com t√≠tulo, √≠cones de a√ß√£o e controle de navega√ß√£o.

Aplica√ß√µes:
Utilizada para dar identidade visual e acessar a√ß√µes como perfil do usu√°rio.

Como usar:

```AppBar(
  title: Text('Perfil do Pet'),
  actions: [
    IconButton(
      icon: Icon(Icons.account_circle),
      onPressed: () {},
    ),
  ],
)```

---

##3.Column

Descri√ß√£o:
Organiza widgets na vertical.

Aplica√ß√µes:
Utilizada para empilhar textos, campos de formul√°rio, cards e bot√µes.

Como usar:

```Column(
  crossAxisAlignment: CrossAxisAlignment.start,
  children: [...],
)```

---

##4.Row

Descri√ß√£o:
Organiza widgets horizontalmente.

Aplica√ß√µes:
Utilizada na exibi√ß√£o do status de ado√ß√£o (√≠cone + texto).

Como usar:

```Row(
  children: [
    Icon(Icons.check_circle),
    Text('Dispon√≠vel'),
  ],
)```

---

##5.Text

Descri√ß√£o:
Exibe uma string com estilo personaliz√°vel.

Aplica√ß√µes:
Presente para exibir t√≠tulos, descri√ß√µes, status e labels.

Como usar:

```Text(
  'Cadastro de Perfil do Pet',
  style: Theme.of(context).textTheme.headlineLarge,
)```

---

##6.TextFormField

Descri√ß√£o:
Campo de entrada de texto com suporte a valida√ß√£o.

Aplica√ß√µes:
Usado para capturar nome, ra√ßa, idade e observa√ß√µes do pet.

Como usar:

```TextFormField(
  controller: nomeController,
  decoration: InputDecoration(
    labelText: 'Nome do Pet',
  ),
  validator: (value) {
    if (value == null || value.isEmpty) {
      return 'Informe o nome do pet';
    }
    return null;
  },
)```

---

##7. SingleChildScrollView

Descri√ß√£o:
Adiciona rolagem ao conte√∫do da tela.

Aplica√ß√µes:
Usado para permitir rolagem em dispositivos com tela pequena ou quando o teclado est√° ativo.

Como usar:

```SingleChildScrollView(
  child: Column(children: [...]),
)```

---

##8.Card

Descri√ß√£o:
Cont√™iner com eleva√ß√£o e bordas arredondadas.

Aplica√ß√µes:
Utilizado para agrupar se√ß√µes como g√™nero, prefer√™ncias de conviv√™ncia e status de ado√ß√£o.

Como usar:

```Card(
  child: Padding(
    padding: EdgeInsets.all(12.0),
    child: Column(children: [...]),
  ),
)```

---

##9.Icon / IconButton

Descri√ß√£o:
Exibe um √≠cone (Icon) ou um √≠cone com a√ß√£o de toque (IconButton).

Aplica√ß√µes:
Utilizado no AppBar (√≠cone de perfil) e no status de ado√ß√£o (√≠cones de check e cancel).

Como usar:

```Icon(Icons.pets)
IconButton(
  icon: Icon(Icons.account_circle),
  onPressed: () {},
)```

---

##10.RadioListTile

Descri√ß√£o:
Permite selecionar uma √∫nica op√ß√£o entre v√°rias (bot√µes de r√°dio).

Aplica√ß√µes:
Selecionar o g√™nero do pet (Macho ou F√™mea).

Como usar:

```RadioListTile<PetGenero>(
  title: Text('Macho'),
  value: PetGenero.macho,
  groupValue: _generoSelecionado,
  onChanged: (PetGenero? value) {
    setState(() {
      _generoSelecionado = value;
    });
  },
)```

---

##11.CheckboxListTile

Descri√ß√£o:
Permite selecionar m√∫ltiplas op√ß√µes booleanas.

Aplica√ß√µes:
Indicar se o pet gosta de crian√ßas e se convive com outros animais.

Como usar:

```CheckboxListTile(
  title: Text('Gosta de crian√ßas'),
  value: _gostaCriancas,
  onChanged: (bool? valor) {
    setState(() {
      _gostaCriancas = valor ?? false;
    });
  },
)```

---

##12.SwitchListTile

Descri√ß√£o:
Controle de altern√¢ncia (on/off).

Aplica√ß√µes:
Indicar se o pet est√° dispon√≠vel para ado√ß√£o.

Como usar:

```SwitchListTile(
  title: Text('Dispon√≠vel para ado√ß√£o'),
  value: _disponivelParaAdocao,
  onChanged: (bool valor) {
    setState(() {
      _disponivelParaAdocao = valor;
    });
  },
)```

---

##13.ElevatedButton

Descri√ß√£o:
Bot√£o elevado com destaque para a√ß√µes principais.

Aplica√ß√µes:
Usado para salvar os dados do pet.

Como usar:

```ElevatedButton.icon(
  onPressed: () {},
  icon: Icon(Icons.save),
  label: Text('Salvar'),
)```

---

##14.OutlinedButton

Descri√ß√£o:
Bot√£o com contorno, geralmente para a√ß√µes secund√°rias.

Aplica√ß√µes:
Usado para limpar os dados do formul√°rio.

Como usar:

```OutlinedButton.icon(
  onPressed: () {},
  icon: Icon(Icons.refresh),
  label: Text('Limpar'),
)```

---

##15.Padding / EdgeInsets

Descri√ß√£o:
Adiciona espa√ßamento interno aos widgets.

Aplica√ß√µes:
Utilizado amplamente para dar espa√ßamento e organiza√ß√£o visual aos componentes.

Como usar:

```Padding(
  padding: EdgeInsets.all(16),
  child: Text('Texto'),
)```

---

##16.SizedBox

Descri√ß√£o:
Adiciona um espa√ßo fixo entre widgets.

Aplica√ß√µes:
Usado para separa√ß√£o vertical e horizontal entre componentes.

Como usar:

SizedBox(height: 16)

---

##17. ThemeData & TextTheme

Descri√ß√£o:
Permite aplicar temas personalizados em toda a aplica√ß√£o.

Aplica√ß√µes:
Definir cores, tipografia e estilos consistentes.

Como usar:

```theme: ThemeData(
  useMaterial3: true,
  colorSchemeSeed: Colors.teal,
)```

---

üéØ Esses componentes foram usados para criar uma interface moderna, acess√≠vel e compat√≠vel com o Material Design 3.
O prot√≥tipo foi testado e est√° pronto para execu√ß√£o em ambiente Flutter.
